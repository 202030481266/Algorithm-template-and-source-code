from functools import cache

c = [1,1,2,2,3,4,5,6,8,10,12,15,18,22,27,32,38,46,54,64,76,89,104,122,142,165,192,222,256,296,
     340,390,448,512,585,668,760,864,982,1113,1260,1426,1610,1816,2048,2304,2590,2910,3264,3658,
     4097,4582,5120,5718,6378,7108,7917,8808,9792,10880,12076,13394,14848,16444,18200,20132,22250,
     24576,27130,29927,32992,36352,40026,44046,48446,53250,58499,64234,70488,77312,84756,92864,101698,
     111322,121792,133184,145578,159046,173682,189586,206848,225585,245920,267968,291874,317788,345856,
     376256,409174,444793,483330,525016,570078,618784,671418,728260,789640,855906,927406,1004544,1087744,
     1177438,1274118,1378304,1490528,1611388,1741521,1881578,2032290,2194432,2368800,2556284,2757826,2974400,
     3207086,3457027,3725410,4013544,4322816,4654670,5010688,5392550,5802008,6240974,6711480,7215644,7755776,
     8334326,8953856,9617150,10327156,11086968,11899934,12769602,13699699,14694244,15757502,16893952,18108418,
     19406016,20792120,22272512,23853318,25540982,27342421,29264960,31316314,33504746,35839008,38328320,40982540,
     43812110,46828032,50042056,53466624,57114844,61000704,65139008,69545358,74236384,79229676,84543782,90198446,
     96214550,102614114,109420549,116658616,124354422,132535702,141231780,150473568,160293888,170727424,181810744,
     193582642,206084096,219358315,233451098,248410816,264288462,281138048,299016608,317984256,338104630,359444904,
     382075868,406072422,431513602,458482688,487067746,517361670,549462336,583473184,619503296,657667584,698087424,
     740890786,786212446,834194700,884987529,938748852,995645336,55852583,119555481,186949049,258238713,333640703,
     413383019,497705761,586861599,681116845,780751876,886061677,997357049,114965106,239229946,370513972,509198514,
     655684594,810394440,973772198,146284849,328423915,520706283,723675305,937902667,163989430,402567296,654300678,
     919887964,200062941,495597213,807301597,136027832,482671280,848172562,233519570,639750473,67955656,519280072,
     994926546,496158145,24300820,580747194,166959261,784471471,434894980,119920837,841323491,600965607,400801751,
     242882448,129359625,62490848,44644013,78303480,166074989,310691038,515017823,782060902,114971358,517053693,
     991772290,542758528,173819680,888946369,692320715,588326383,581557167,676826337,879177939,193896710,626518758,
     182844315,868949151,691196692,656252574,771097590,43041626,479740071,89208609,879839212,860418576,40145155,
     428647317,36004210,872765252,949970735,279175535,872471266]

class Solution:
    def numberOfWays(self, n: int, x: int) -> int:
        # 直接记忆化搜索即可
        mod = 10 ** 9 + 7
        if x == 1:
            return c[n-1] # 这里是性能瓶颈
        @cache
        def dfs(n, x, start) -> int:
            if n == 0:
                return 1
            res = 0
            for i in range(start, n+1):
                if i ** x <= n:
                    res += dfs(n - i ** x, x, i + 1)
                    res %= mod
                else:
                    break
            return res
        return dfs(n, x, 1)

# 0, 1 背包模板题， 直接将背包容量变成 n 即可
MX_N, MX_X = 300, 5
f = [[1] + [0] * MX_N for _ in range(MX_X)]
for x in range(MX_X):
    for i in count(1):
        v = i ** (x + 1)
        if v > MX_N: break
        for s in range(MX_N, v - 1, -1):
            f[x][s] += f[x][s - v]

class Solution2:
    def numberOfWays(self, n: int, x: int) -> int:
        return f[x - 1][n] % (10 ** 9 + 7)
                


                    
